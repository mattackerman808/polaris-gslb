#!/usr/bin/env python3
# -*- coding: utf-8 -*-


import argparse
import socket
import sys

import daemon

from  polaris_health import config, guardian


# minimum version of python3 required
MINIMUM_PY3_VERSION = (3, 4, 3)
# control socket recv() buffer size
CONTROL_SOCKET_RECV_BUFF_SIZE = 256


def main():
    parser = argparse.ArgumentParser(
        description="Polaris health control")
    parser.add_argument('action',
                        choices=[
                            'ping',
                            'start',
                            'start-debug',
                            'stop',
                            'check-config',
                            ]) 
    opts = parser.parse_args()

    phc = PolarisHealthControl()

    method = opts.action.replace('-', '_')
    getattr(phc, method)()


class PolarisHealthControl:

    def __init__(self):
        # check for the minimum required py3 version
        if sys.version_info < MINIMUM_PY3_VERSION:
            min_version_str = '.'.join([ str(MINIMUM_PY3_VERSION[i]) 
                           for i in range(len(MINIMUM_PY3_VERSION))])
            raise Exception('Python version {} or later is required'.
                            format(min_version_str))

        # load polaris_health.config
        guardian.Guardian.load_configuration()

    def check_config(self):
        guardian.Guardian.load_configuration()
        guardian.Guardian().check()

    def ping(self):
        self._send_control_sock_cmd('ping') == 'pong'
        
    def start(self, debug=False):
        """In debug the app will not daemonize, logging level is set to debug,
        logs are sent to stdout
        """
        if self._is_running():
            raise Exception('Polaris health is already running')

        if debug:
            guardian.Guardian().start(debug=True)
        else:
            # turn into a daemon, NO CODE WILL EXECUTE AFTER THIS
            with daemon.DaemonContext():
                guardian.Guardian().start()

    def start_debug(self):
        self.start(debug=True)

    def stop(self):
        if not self._is_running(): 
            raise Exception('Polaris health is not running')

        self._send_control_sock_cmd('stop')

    def _is_running(self):
        try:
            if self._send_control_sock_cmd('ping') == 'pong':
                return True
            else:
                return False
        except OSError:
            return False

    def _send_control_sock_cmd(self, cmd):
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        sock.settimeout(1)
        sock.connect(config.BASE['CONTROL_SOCKET_FILE'])
        sock.sendall(cmd.encode())
        resp = sock.recv(CONTROL_SOCKET_RECV_BUFF_SIZE).decode()
        sock.close()
        return resp


if __name__ == '__main__':
    main()

